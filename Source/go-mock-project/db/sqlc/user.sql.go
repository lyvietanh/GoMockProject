// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(
	email, 
    role_id, 
    title, 
    last_name, 
    first_name, 
    date_of_birth, 
    phone, 
    travel_doc_type, 
    travel_doc_number, 
    ffp_number, 
    password_salt, 
    secure_password, 
    enabled, 
    create_date
) VALUES (
    $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14
) RETURNING email, role_id, title, last_name, first_name, date_of_birth, phone, travel_doc_type, travel_doc_number, ffp_number, password_salt, secure_password, enabled, last_login_date, create_date, modify_date
`

type CreateUserParams struct {
	Email           string         `json:"email"`
	RoleID          sql.NullString `json:"role_id"`
	Title           sql.NullString `json:"title"`
	LastName        sql.NullString `json:"last_name"`
	FirstName       sql.NullString `json:"first_name"`
	DateOfBirth     sql.NullTime   `json:"date_of_birth"`
	Phone           sql.NullString `json:"phone"`
	TravelDocType   sql.NullString `json:"travel_doc_type"`
	TravelDocNumber sql.NullString `json:"travel_doc_number"`
	FfpNumber       sql.NullString `json:"ffp_number"`
	PasswordSalt    sql.NullString `json:"password_salt"`
	SecurePassword  sql.NullString `json:"secure_password"`
	Enabled         bool           `json:"enabled"`
	CreateDate      sql.NullTime   `json:"create_date"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Email,
		arg.RoleID,
		arg.Title,
		arg.LastName,
		arg.FirstName,
		arg.DateOfBirth,
		arg.Phone,
		arg.TravelDocType,
		arg.TravelDocNumber,
		arg.FfpNumber,
		arg.PasswordSalt,
		arg.SecurePassword,
		arg.Enabled,
		arg.CreateDate,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.RoleID,
		&i.Title,
		&i.LastName,
		&i.FirstName,
		&i.DateOfBirth,
		&i.Phone,
		&i.TravelDocType,
		&i.TravelDocNumber,
		&i.FfpNumber,
		&i.PasswordSalt,
		&i.SecurePassword,
		&i.Enabled,
		&i.LastLoginDate,
		&i.CreateDate,
		&i.ModifyDate,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT email, role_id, title, last_name, first_name, date_of_birth, phone, travel_doc_type, travel_doc_number, ffp_number, password_salt, secure_password, enabled, last_login_date, create_date, modify_date FROM users
WHERE 
    email=$1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.Email,
		&i.RoleID,
		&i.Title,
		&i.LastName,
		&i.FirstName,
		&i.DateOfBirth,
		&i.Phone,
		&i.TravelDocType,
		&i.TravelDocNumber,
		&i.FfpNumber,
		&i.PasswordSalt,
		&i.SecurePassword,
		&i.Enabled,
		&i.LastLoginDate,
		&i.CreateDate,
		&i.ModifyDate,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users
SET 
    password_salt=$2,
    secure_password=$3,
    modify_date=$4
WHERE 
    email=$1
RETURNING email, role_id, title, last_name, first_name, date_of_birth, phone, travel_doc_type, travel_doc_number, ffp_number, password_salt, secure_password, enabled, last_login_date, create_date, modify_date
`

type UpdateUserPasswordParams struct {
	Email          string         `json:"email"`
	PasswordSalt   sql.NullString `json:"password_salt"`
	SecurePassword sql.NullString `json:"secure_password"`
	ModifyDate     sql.NullTime   `json:"modify_date"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword,
		arg.Email,
		arg.PasswordSalt,
		arg.SecurePassword,
		arg.ModifyDate,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.RoleID,
		&i.Title,
		&i.LastName,
		&i.FirstName,
		&i.DateOfBirth,
		&i.Phone,
		&i.TravelDocType,
		&i.TravelDocNumber,
		&i.FfpNumber,
		&i.PasswordSalt,
		&i.SecurePassword,
		&i.Enabled,
		&i.LastLoginDate,
		&i.CreateDate,
		&i.ModifyDate,
	)
	return i, err
}

const updateUserProfile = `-- name: UpdateUserProfile :one
UPDATE users
SET 
    role_id=$2,
    title=$3,
    last_name=$4,
    first_name=$5,
    date_of_birth=$6,
    phone=$7,
    travel_doc_type=$8,
    travel_doc_number=$9,
    ffp_number=$10,
    enabled=$11,
    modify_date=$12
WHERE 
    email=$1
RETURNING email, role_id, title, last_name, first_name, date_of_birth, phone, travel_doc_type, travel_doc_number, ffp_number, password_salt, secure_password, enabled, last_login_date, create_date, modify_date
`

type UpdateUserProfileParams struct {
	Email           string         `json:"email"`
	RoleID          sql.NullString `json:"role_id"`
	Title           sql.NullString `json:"title"`
	LastName        sql.NullString `json:"last_name"`
	FirstName       sql.NullString `json:"first_name"`
	DateOfBirth     sql.NullTime   `json:"date_of_birth"`
	Phone           sql.NullString `json:"phone"`
	TravelDocType   sql.NullString `json:"travel_doc_type"`
	TravelDocNumber sql.NullString `json:"travel_doc_number"`
	FfpNumber       sql.NullString `json:"ffp_number"`
	Enabled         bool           `json:"enabled"`
	ModifyDate      sql.NullTime   `json:"modify_date"`
}

func (q *Queries) UpdateUserProfile(ctx context.Context, arg UpdateUserProfileParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserProfile,
		arg.Email,
		arg.RoleID,
		arg.Title,
		arg.LastName,
		arg.FirstName,
		arg.DateOfBirth,
		arg.Phone,
		arg.TravelDocType,
		arg.TravelDocNumber,
		arg.FfpNumber,
		arg.Enabled,
		arg.ModifyDate,
	)
	var i User
	err := row.Scan(
		&i.Email,
		&i.RoleID,
		&i.Title,
		&i.LastName,
		&i.FirstName,
		&i.DateOfBirth,
		&i.Phone,
		&i.TravelDocType,
		&i.TravelDocNumber,
		&i.FfpNumber,
		&i.PasswordSalt,
		&i.SecurePassword,
		&i.Enabled,
		&i.LastLoginDate,
		&i.CreateDate,
		&i.ModifyDate,
	)
	return i, err
}
