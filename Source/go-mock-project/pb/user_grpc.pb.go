// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: user.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserGrpcClient is the client API for UserGrpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserGrpcClient interface {
	Login(ctx context.Context, in *GrpcLoginRequest, opts ...grpc.CallOption) (*GrpcLoginResponse, error)
	VerifyAuth(ctx context.Context, in *GrpcVerifyAuthRequest, opts ...grpc.CallOption) (*GrpcVerifyAuthResponse, error)
	RegisterUser(ctx context.Context, in *GrpcRegisterUserRequest, opts ...grpc.CallOption) (*GrpcRegisterUserResponse, error)
	UpdateUserProfile(ctx context.Context, in *GrpcUpdateUserProfileRequest, opts ...grpc.CallOption) (*GrpcUpdateUserProfileResponse, error)
	UpdateUserPassword(ctx context.Context, in *GrpcUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GrpcUpdateUserPasswordResponse, error)
	ViewBookingHistory(ctx context.Context, in *GrpcViewBookingHistoryRequest, opts ...grpc.CallOption) (*GrpcViewBookingHistoryResponse, error)
}

type userGrpcClient struct {
	cc grpc.ClientConnInterface
}

func NewUserGrpcClient(cc grpc.ClientConnInterface) UserGrpcClient {
	return &userGrpcClient{cc}
}

func (c *userGrpcClient) Login(ctx context.Context, in *GrpcLoginRequest, opts ...grpc.CallOption) (*GrpcLoginResponse, error) {
	out := new(GrpcLoginResponse)
	err := c.cc.Invoke(ctx, "/pb.UserGrpc/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcClient) VerifyAuth(ctx context.Context, in *GrpcVerifyAuthRequest, opts ...grpc.CallOption) (*GrpcVerifyAuthResponse, error) {
	out := new(GrpcVerifyAuthResponse)
	err := c.cc.Invoke(ctx, "/pb.UserGrpc/VerifyAuth", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcClient) RegisterUser(ctx context.Context, in *GrpcRegisterUserRequest, opts ...grpc.CallOption) (*GrpcRegisterUserResponse, error) {
	out := new(GrpcRegisterUserResponse)
	err := c.cc.Invoke(ctx, "/pb.UserGrpc/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcClient) UpdateUserProfile(ctx context.Context, in *GrpcUpdateUserProfileRequest, opts ...grpc.CallOption) (*GrpcUpdateUserProfileResponse, error) {
	out := new(GrpcUpdateUserProfileResponse)
	err := c.cc.Invoke(ctx, "/pb.UserGrpc/UpdateUserProfile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcClient) UpdateUserPassword(ctx context.Context, in *GrpcUpdateUserPasswordRequest, opts ...grpc.CallOption) (*GrpcUpdateUserPasswordResponse, error) {
	out := new(GrpcUpdateUserPasswordResponse)
	err := c.cc.Invoke(ctx, "/pb.UserGrpc/UpdateUserPassword", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userGrpcClient) ViewBookingHistory(ctx context.Context, in *GrpcViewBookingHistoryRequest, opts ...grpc.CallOption) (*GrpcViewBookingHistoryResponse, error) {
	out := new(GrpcViewBookingHistoryResponse)
	err := c.cc.Invoke(ctx, "/pb.UserGrpc/ViewBookingHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserGrpcServer is the server API for UserGrpc service.
// All implementations must embed UnimplementedUserGrpcServer
// for forward compatibility
type UserGrpcServer interface {
	Login(context.Context, *GrpcLoginRequest) (*GrpcLoginResponse, error)
	VerifyAuth(context.Context, *GrpcVerifyAuthRequest) (*GrpcVerifyAuthResponse, error)
	RegisterUser(context.Context, *GrpcRegisterUserRequest) (*GrpcRegisterUserResponse, error)
	UpdateUserProfile(context.Context, *GrpcUpdateUserProfileRequest) (*GrpcUpdateUserProfileResponse, error)
	UpdateUserPassword(context.Context, *GrpcUpdateUserPasswordRequest) (*GrpcUpdateUserPasswordResponse, error)
	ViewBookingHistory(context.Context, *GrpcViewBookingHistoryRequest) (*GrpcViewBookingHistoryResponse, error)
	mustEmbedUnimplementedUserGrpcServer()
}

// UnimplementedUserGrpcServer must be embedded to have forward compatible implementations.
type UnimplementedUserGrpcServer struct {
}

func (UnimplementedUserGrpcServer) Login(context.Context, *GrpcLoginRequest) (*GrpcLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserGrpcServer) VerifyAuth(context.Context, *GrpcVerifyAuthRequest) (*GrpcVerifyAuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAuth not implemented")
}
func (UnimplementedUserGrpcServer) RegisterUser(context.Context, *GrpcRegisterUserRequest) (*GrpcRegisterUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserGrpcServer) UpdateUserProfile(context.Context, *GrpcUpdateUserProfileRequest) (*GrpcUpdateUserProfileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserProfile not implemented")
}
func (UnimplementedUserGrpcServer) UpdateUserPassword(context.Context, *GrpcUpdateUserPasswordRequest) (*GrpcUpdateUserPasswordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUserPassword not implemented")
}
func (UnimplementedUserGrpcServer) ViewBookingHistory(context.Context, *GrpcViewBookingHistoryRequest) (*GrpcViewBookingHistoryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ViewBookingHistory not implemented")
}
func (UnimplementedUserGrpcServer) mustEmbedUnimplementedUserGrpcServer() {}

// UnsafeUserGrpcServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserGrpcServer will
// result in compilation errors.
type UnsafeUserGrpcServer interface {
	mustEmbedUnimplementedUserGrpcServer()
}

func RegisterUserGrpcServer(s grpc.ServiceRegistrar, srv UserGrpcServer) {
	s.RegisterService(&UserGrpc_ServiceDesc, srv)
}

func _UserGrpc_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGrpc/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServer).Login(ctx, req.(*GrpcLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpc_VerifyAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcVerifyAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServer).VerifyAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGrpc/VerifyAuth",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServer).VerifyAuth(ctx, req.(*GrpcVerifyAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpc_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcRegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGrpc/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServer).RegisterUser(ctx, req.(*GrpcRegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpc_UpdateUserProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcUpdateUserProfileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServer).UpdateUserProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGrpc/UpdateUserProfile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServer).UpdateUserProfile(ctx, req.(*GrpcUpdateUserProfileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpc_UpdateUserPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcUpdateUserPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServer).UpdateUserPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGrpc/UpdateUserPassword",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServer).UpdateUserPassword(ctx, req.(*GrpcUpdateUserPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserGrpc_ViewBookingHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrpcViewBookingHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserGrpcServer).ViewBookingHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.UserGrpc/ViewBookingHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserGrpcServer).ViewBookingHistory(ctx, req.(*GrpcViewBookingHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserGrpc_ServiceDesc is the grpc.ServiceDesc for UserGrpc service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserGrpc_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.UserGrpc",
	HandlerType: (*UserGrpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _UserGrpc_Login_Handler,
		},
		{
			MethodName: "VerifyAuth",
			Handler:    _UserGrpc_VerifyAuth_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _UserGrpc_RegisterUser_Handler,
		},
		{
			MethodName: "UpdateUserProfile",
			Handler:    _UserGrpc_UpdateUserProfile_Handler,
		},
		{
			MethodName: "UpdateUserPassword",
			Handler:    _UserGrpc_UpdateUserPassword_Handler,
		},
		{
			MethodName: "ViewBookingHistory",
			Handler:    _UserGrpc_ViewBookingHistory_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
